{
  "name": "dombars",
  "version": "0.1.1",
  "description": "An extension of Handlebars that generates DOM objects instead of strings.",
  "main": "./dombars.js",
  "scripts": {
    "build": "./node_modules/.bin/grunt build",
    "test": "npm run-script build && ./node_modules/.bin/mocha-phantomjs ./test/browser/index.html"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/blakeembrey/dombars"
  },
  "keywords": [
    "dombars",
    "template",
    "dom",
    "html",
    "handlebars",
    "mustache"
  ],
  "author": {
    "name": "Blake Embrey"
  },
  "license": "MIT",
  "devDependencies": {
    "browserify": "~2.35.0",
    "mocha-phantomjs": "~3.1.0",
    "chai": "~1.7.2",
    "mocha": "~1.12.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt": "~0.4.1",
    "grunt-browserify": "~1.2.9",
    "grunt-contrib-jshint": "~0.7.0",
    "grunt-cli": "~0.1.9",
    "uglifyify": "~1.0.1",
    "load-grunt-tasks": "~0.2.0",
    "grunt-newer": "~0.5.4",
    "sinon-chai": "~2.4.0",
    "sinon": "~1.7.3",
    "grunt-contrib-uglify": "~0.2.7"
  },
  "dependencies": {
    "htmlparser2": "~3.3.0",
    "handlebars": "~1.0.12",
    "raf-component": "~1.1.2"
  },
  "readme": "# dombars\n\nDOMBars is an extension of [Handlebars.js](https://github.com/wycats/handlebars.js). It keeps almost all the same semantics of Handlebars, but generates DOM objects instead of string-based templates. This is an extremely powerful concept when you consider data binding and reactive programming. By creating DOM representations of a template, we can easily keep track of all the generated nodes and update only the specific content when data changes. All of this is possible without any special markup being added to your HTML and Handlebars templates.\n\n## Installation\n\nInstalling DOMBars is simple. Multiple builds are provided in the `dist` directory, just add the required script to you site. Alternatively DOMBars is available on [npm](https://npmjs.org/package/dombars).\n\n## Usage\n\nThe API is backward-compatible with Handlebars, but extends it with all the DOM-based functionality. Semantically, there is zero change; however, one thing to keep in mind is that helper functions generate DOM objects (not strings), so you can't just concatenate together and hope for the best. To achieve a similar effect, create a document fragment and return it instead.\n\n### Getters\n\nTo provide a custom getter function, just set `DOMBars.get` to your desired function. The function accepts two arguments, the `object` and `property`.\n\n### Subscribers\n\nSubscriptions are used to achieve data binding. By default, the subscription is a no-op. To set up your own custom subscription function, set `DOMBars.subscribe` to the disired subsciber. The function itself accepts three arguments - `object`, `property` and `callback`. For example, to do data binding with Backbone.js:\n\n```js\nDOMBars.subscribe = function (object, property, callback) {\n  object.on('change:' + property, callback);\n};\n```\n\nYou also need to provide an unsubscribe function under `DOMBars.unsubscribe`. This function accepts the same three arguments - `object`, `property` and `callback`. The callback is the same function that was passed in with `DOMBars.subscribe`. For example, to unsubscribe a subscription in Backbone.js:\n\n```js\nDOMBars.unsubscribe = function (object, property, callback) {\n  object.off('change:' + property, callback);\n};\n```\n\n### Unsubscribing\n\nDOMBars templates automatically unsubscribe listeners when a change happens. However, to unsubscribe the root DOM element you need to call the `unsubscribe` method on the returned DOM element. This is important since your listeners and helpers would otherwise not know to stop listening for changes, and would result in a fairly substantial memory leak over time.\n\nFor custom helpers that need to be unsubscribed, a function is made available under `DOMBars.VM.unsubscribe`. Pass in the function that needs to be called to unsubscribe, and when the helper is destroyed the unsubscribe function will be called.\n\n### Events\n\nDOMBars will emit events during the contruction of every template. This allows the creation of some amazing plugins and optimized attaching of event listeners to the DOM, since you no longer need to do DOM traversal. During any template execution, you can access the the current execution context on `DOMBars.VM.context`.\n\nTo listen to events, you can subscribe using the regular `DOMBars.on` or `DOMBars.once` for a callback that should only run once.\n\n**createElement** (el)\n\nTriggered any time an element in the template is created. This occurs before the element has any attributes or is appended to the DOM.\n\n**createComment** (el)\n\nTriggered any time a comment node is created from the template. This occurs before the comment has been appended to the DOM.\n\n**setAttribute** (el, name, value)\n\nTriggered when an attribute is set on an element in the template. This occurs right before the attribute is set.\n\n**removeAttribute** (el, name)\n\nTriggered when an attribute is removed from an element in the template. This occurs right before the attribute is removed.\n\n**appendChild** (parent, child)\n\nTriggered any time a child node is appended to the template. This occurs after the child has been appended.\n\n**domify** (dom)\n\nTriggered any time a Handlebars expression is transformed to DOM. This occurs whenever a Handlebars triple-stash is used as text.\n\n**textify** (node)\n\nTriggered any time a Handlbars expression is transformed into a text node. This will occur whenever a Handlebars expression is used as text.\n\n## Examples\n\n### Subscribers\n\n```js\n// Set a custom subscription function just for the test.\nDOMBars.subscribe = function (obj, name, fn) {\n  // Every 2 seconds we will be turning the checkbox on and off again.\n  window.setInterval(function () {\n    obj[name] = !obj[name];\n    fn();\n  }, 2000);\n};\n\n// Generate a template.\nvar template = DOMBars.compile(\n  '<input type=\"checkbox\" checked=\"{{{test}}}\">'\n)({\n  test: false\n});\n\n// Append the template directly to the body element and watch the magic happen.\ndocument.body.appendChild(template);\n```\n\n### Helpers\n\n```js\nDOMBars.registerHelper('currentTime', function () {\n  var node = document.createTextNode(new Date().toLocaleTimeString());\n\n  var interval = window.setInterval(function () {\n    node.textContent = new Date().toLocaleTimeString();\n  }, 1000);\n\n  // Use the VM unsubscribe method to register a way to remove helper listeners.\n  DOMBars.VM.unsubscribe(function () {\n    window.clearInterval(interval);\n  });\n\n  return node;\n});\n\nvar template = DOMBars.compile('{{currentTime}}')();\n\ndocument.body.appendChild(template);\n```\n\n## Plugins\n\n* [node-dombarsify](https://github.com/blakeembrey/node-dombarsify) - DOMBars precompiler plugin for Browserify\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/blakeembrey/dombars/issues"
  },
  "_id": "dombars@0.1.1",
  "_from": "dombars@*"
}
